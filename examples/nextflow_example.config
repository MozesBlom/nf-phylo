/*
 *              -------------------------------------------------
 *                      VCF TO PHYLO! - NF config file
 *              -------------------------------------------------
 *                               Blom, 2022  (c)
 * 
 *  Pipeline to run a variety of different phylogenetic analyses using whole-genome data.
 *
 *  The workflow can take a VCF, Mask and reference file to call consensus sequences (call_consensus == true)
 *  or start with pre-called consensus sequences. If the latter, please be aware that it assumes that indel
 *  variation has been removed.
 *
 *  If consensus sequences ought to be called. The pipeline expects the following input format:
 *
 *  vcf file = /inputdir/(individual)/(chromo)_vars_filt_indels.vcf.gz
 *  mask file = /inputdir/(individual)/(chromo)_mask_cov_het.vcf
 */


// Input and output parameters
params {

    // -- INPUT INFO --
    indivs_file = "/path/to/nf-phylo/examples/indivs.txt"
    chromos_file = "/path/to/nf-phylo/examples/chromos.txt"
    chromo_info = "/path/to/chromo_info.tsv"
    ref_file = "/path/to/reference/ref.fa"
    inputdir = "/path/to/directory/with/variants_mask_vcfs/per/individual/"
    outputdir = "/path/to/nf-phylo/results/"
    astral_fn = "/path/to/nf-phylo/bin/astral.5.7.8.jar"

    // Sex chromosomes are differentially treated. Normally only a single sex chromosome
    // should be included because the other is short, highly repetitive, etc.
    // NOTE that the code needs to be checked if the aim is really to include multiple sex chromos!
    sex_chromos = ['chrZ', 'chrW']


    // -- ANALYSES TO DO --

    call_consensus = true              // [boolean; true or false] Call consensus sequences for each individual and scaffold/chromosome?
    infer_ML_on_subsets = true         // [boolean; true or false] ML chromosome and autosome phylogenies based on concatenated subset of genome? If 'false', phylogenies inferred for complete chromosomes/autosomes.
    filter_complete_chromos = false    // [boolean; true or false] If infer_ML_on_subsets == false, do the complete chromosome (and thus autosome) alignments require filtering? If yes, the 'missing_data_per_col_threshold' is employed
    infer_chromo_phy = true            // [boolean; true or false] Infer a phylogeny for each chromosome?


    // -- SETTINGS -- 

    // CONSENSUS CALLING
    // - IF consensus_calling == false, specify a tsv file with the path to each consensus sequences (see README) of format: indiv, chromo, path_to_consensus.fa
    consensus_tsv_fn = "/path/to/consensus_list.fa"

    // ALIGNMENT FILTERING
    // - IF filter_by_subset == true, specify length of subset. MB value is trade-off between number of jobs spawned and the duration of each job 
    filt_subset_size = 1                        // [integer; val * Megabases]
    // - Relative data cut-off for a msa column to be considered as filtered -- used for both concatenation and window filtering
    missing_data_per_col_threshold = 0.5        // [float; min 0 - max 1], 0 == No missing data per row permitted. 1 == Also a row with only missing data permitted
    // - Relative cut-off for filtered window length relative to original window size -- used for window filtering
    missing_cols_per_window_threshold = 0.5     // [float; min 0 - max 1], 0 == Windows with a single alignment column allowed as well  1 == Filtered window needs to be as long as the original window
    // - Relative data cut-off for an individual consensus sequence to be considered as having too much missing data -- used for window filtering only
    missing_data_per_row_threshold = 0.4        // [float; min 0 - max 1], 0 == No missing data per row permitted. 1 == Also a row with only missing data permitted
    // - Relative cut-off for number of individuals that exceed the above 'missing_data_per_row_threshold' -- used for window filtering only
    missing_indivs_per_window_threshold = 0.8   // [float; min 0 - max 1], 0 == Windows with a single individual permitted as well,  1 == All individuals need to be present in the alignment

    // SUBSET SIZES
    // - Min number of basepairs between consecutive windows
    window_jump = 100000                                       // [integer]
    // - Range of window lengths for which windows need to be generated
    window_sizes = [1000, 2000, 5000, 10000, 20000, 50000]     // [list with integers]

    // PHYLOGENY
    // - Model selection (MFP) or use a single substitution model (eg. GTR+I+G)? (see IQtree2 for options)
    phy_model_concat = "GTR+I+G"
}


// Cluster specific profiles that faciliate job scheduling and cluster requirements
profiles {

    standard {
       /*
        * In development
        */
        process.executor = 'local'
    }

    mfn {
       /*
        * A profile that is functional and has been succesfully used on the MfN cluster
        */
        includeConfig 'config/mfn.config' }

    rackham {
       /*
        * A profile that is functional and has been succesfully used on the Uppmax cluster
        */
        includeConfig 'config/rackham.config'
    }

}
